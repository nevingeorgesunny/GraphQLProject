scalar UUID

type Query {
    helloWorld:String


    getAllBooks:[Book]

    bookById(id:String): Book
    bookByIdValidations(id:String!): Book
    bookByFilters(filters:BookFilter!): [Book]
    bookByFiltersWithEnvVariable(filters:BookFilter!): [Book]

    searchAccounts(filter: AccountsFilter,sort: AccountsSort, pagination: Pagination): [Accounts!]
}



##################### BOOK ####################################

type Book {
    id: ID
    name: String
    pageCount: Int
    author: Author
}

type Author {
    id: ID
    firstName: String
    lastName: String
}


input BookFilter {
    id: String
    name: String
    pageCount: Int
    someUUID: String
}

##############################################################

type Accounts {
  id: ID
  account_id: Int
  limit: Int
  products: [String]
  someUUID: UUID
  sampleUserTestCaseSubmissions : [SampleUserTestCaseSubmissions]
  nevin: Nevin
}

type SampleUserTestCaseSubmissions{
    testCaseId: UUID
    stdin: String
    innerobj: Innerobj
}

type Nevin{
    sunny: String
}

type Innerobj{
    innermostobj: Innermostobj
}

type Innermostobj{
    theQuick: String
}

######-------------------------------------------------------------------------------########

input AccountsFilter {
   account_id: IntExpression
   limit: IntExpression
   someUUID: UUIDExpression
   sampleUserTestCaseSubmissions: SampleUserTestCaseSubmissionsFilter
   nevin: NevinFilter

   and: [AccountsFilter!]
   or: [AccountsFilter!]
   not: AccountsFilter
}

input SampleUserTestCaseSubmissionsFilter{
    testCaseId: UUIDExpression
    stdin: StringExpression
    innerobj: InnerobjFilter
}

input InnerobjFilter{
    innermostobj: InnermostobjFilter
}

input InnermostobjFilter{
    theQuick: StringExpression
}

input NevinFilter{
    sunny: StringExpression
}

# Define String expression
input StringExpression {
   equals: String
   contains: String
   in: [String!]
}

input UUIDExpression {
   equals: String
}

# Define Int Expression
input IntExpression {
   eq: Int
   gt: Int
   gte: Int
   lt: Int
   lte: Int
   in: [Int!]
   between: [Int!]
}


######-------------------------------------------------------------------------------########


input AccountsSort{
   account_id: Direction
   limit: Direction
   someUUID: Direction
   sampleUserTestCaseSubmissions : SampleUserTestCaseSubmissionsSort
   nevin: NevinSort
}

input SampleUserTestCaseSubmissionsSort{
    testCaseId: Direction
    stdin: Direction
    innerobj: InnerobjSort

}

input InnerobjSort{
    innermostobj: InnermostobjSort
}

input InnermostobjSort{
     theQuick: Direction
}


input NevinSort{
 sunny: Direction
}

enum Direction{
    ASC,
    DESC
}


######-------------------------------------------------------------------------------########

input Pagination{
    offset: Int
    pageSize: Int
}

######-------------------------------------------------------------------------------########





















